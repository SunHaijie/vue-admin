{"remainingRequest":"/Users/Jeff/Documents/workspace/vue-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Jeff/Documents/workspace/vue-admin/src/components/Table/index.vue?vue&type=style&index=0&id=3363c4d1&lang=scss&scoped=true&","dependencies":[{"path":"/Users/Jeff/Documents/workspace/vue-admin/src/components/Table/index.vue","mtime":1614522532105},{"path":"/Users/Jeff/Documents/workspace/vue-admin/node_modules/css-loader/dist/cjs.js","mtime":1613959812332},{"path":"/Users/Jeff/Documents/workspace/vue-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1613959818681},{"path":"/Users/Jeff/Documents/workspace/vue-admin/node_modules/postcss-loader/src/index.js","mtime":1613959815802},{"path":"/Users/Jeff/Documents/workspace/vue-admin/node_modules/sass-loader/dist/cjs.js","mtime":1613959817599},{"path":"/Users/Jeff/Documents/workspace/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":1613959811244},{"path":"/Users/Jeff/Documents/workspace/vue-admin/node_modules/vue-loader/lib/index.js","mtime":1613959818680}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRhYmxlLWZvb3RlciB7IHBhZGRpbmc6IDE1cHggMDsgfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4JA","file":"index.vue","sourceRoot":"src/components/Table","sourcesContent":["<template>\n  <div>\n    <el-table :data=\"data.tableData\" border style=\"width: 100%\" @selection-change=\"thatSelectCheckbox\">\n      <!--多选框-->\n      <el-table-column v-if=\"data.tableConfig.selection\" type=\"selection\" width=\"55\"></el-table-column>\n      <template v-for=\"item in data.tableConfig.tHead\">\n        <!--v-slot-->\n        <el-table-column\n          :key=\"item.field\"\n          :prop=\"item.field\"\n          :label=\"item.label\"\n          :width=\"item.width\"\n          v-if=\"item.columnType === 'slot'\"\n        >\n          <template slot-scope=\"scope\">\n            <slot :name=\"item.slotName\" :data=\"scope.row\"></slot>\n          </template>\n        </el-table-column>\n        <!--文本数据渲染-->\n        <el-table-column\n          :key=\"item.field\"\n          :prop=\"item.field\"\n          :label=\"item.label\"\n          :width=\"item.width\"\n          v-else\n        ></el-table-column>\n      </template>\n    </el-table>\n    <div class=\"table-footer\">\n        <el-row>\n            <el-col :span=\"4\">\n                <slot name=\"tableFooterLeft\"></slot>\n            </el-col>\n            <el-col :span=\"20\">\n                <el-pagination\n                    class=\"pull-right\"\n                    v-if=\"data.tableConfig.paginationShow\"\n                    @size-change=\"handleSizeChange\"\n                    @current-change=\"handleCurrentChange\"\n                    :current-page=\"pageData.currentPage\"\n                    :page-sizes=\"pageData.pageSizes\"\n                    :page-size=\"pageData.pageSize\"\n                    :layout=\"data.tableConfig.paginationLayout\"\n                    :total=\"pageData.total\"\n                    background\n                ></el-pagination>\n            </el-col>\n        </el-row>\n    </div>\n    \n  </div>\n</template>\n<script>\nimport { reactive, onBeforeMount, onMounted, watch } from '@vue/composition-api';\nimport { loadData } from \"./tableLoadData\";\nimport { paginationHook } from \"./paginationHook\"\nexport default {\n    name: \"tableVue\",\n    props: {\n        config: {\n            type: Object,\n            default: () => {}\n        },\n        tableRow: {\n            type: Object,\n            default: () => {}\n        }\n    },\n    setup(props, { root, emit }){\n        // 加载数据\n        const { tableData, tableLoadData } = loadData({ root });\n        // 页码\n        const { pageData, handleSizeChange, handleCurrentChange, totalCount } = paginationHook();\n        // 组件变量\n        const data = reactive({\n            tableConfig: {\n                selection: true,\n                recordCheckbox: false,\n                requestData: {},\n                tHead: [],\n                paginationLayout: \"total, sizes, prev, pager, next, jumper\",\n                paginationShow: true\n            },\n            tableData: []\n        });\n        /**\n         * vue3.0 业务逻辑的折分及组合，还有复用性\n         */\n        // 数据渲染\n        watch([\n            () => tableData.item,\n            () => tableData.total\n        ], ([tableData, total]) => {\n            data.tableData = tableData;\n            totalCount(total);\n        });\n        // 页码监听\n        watch([\n            () => pageData.currentPage,\n            () => pageData.pageSize\n        ], ([currentPage, pageSize]) => {\n            let requestData = data.tableConfig.requestData;\n            if(requestData.data) {\n                requestData.data.pageNumber = currentPage;\n                requestData.data.pageSize = pageSize;\n                tableLoadData(data.tableConfig.requestData);\n            }\n        })\n        /**\n         * 方法 mehtods\n         */\n        // 初始化table配置项 // const声明对象或 数组\n        // 匹配相同的key，如果存在，则替换\n        const initTableConfig = () => {\n            let configData = props.config;\n            let keys = Object.keys(data.tableConfig);\n            for(let key in configData) {\n                if(keys.includes(key)){  //  [\"selection\", \"recordCheckbox\", \"requestUrl\", \"tHead\"].includes(\"selection\")\n                    data.tableConfig[key] = configData[key];\n                }\n            }\n        }\n        // 勾选checkbox时触发\n        const thatSelectCheckbox = (val) => {\n            let rowData = {\n                idItem: val.map(item => item.id)\n            }\n            emit(\"update:tableRow\", rowData);\n        }\n        // 刷新数据\n        const refreshData = () => {\n            tableLoadData(data.tableConfig.requestData);\n        }\n        // 带参数刷新数据\n        const paramsLoadData = (params) => {\n            let requestData = Object.assign({}, params, {\n                pageNumber: 1,\n                pageSize: 10\n            })\n            data.tableConfig.requestData.data = requestData\n            tableLoadData(data.tableConfig.requestData);\n        }\n\n        onBeforeMount(() => {\n            initTableConfig();\n            tableLoadData(data.tableConfig.requestData);\n        })\n\n        return {\n            data, pageData, \n            handleSizeChange, handleCurrentChange, thatSelectCheckbox, refreshData, paramsLoadData\n        }\n    }\n}\n</script>\n<style lang=\"scss\" scoped>\n.table-footer { padding: 15px 0; }\n</style>\n\n<!--\n初始化的数据，不需要监听，\n可以在挂载之前预先处理。\n-->\n\n<!--\nv-slot插槽：父组件传内容到子组件显示\n1、匿名插槽：没有指定某一个插槽，全部都显示\n2、具名插槽：指定插槽显示内容\n3、作用域插槽：可以进行数据绑定，父子组件通讯\n-->"]}]}