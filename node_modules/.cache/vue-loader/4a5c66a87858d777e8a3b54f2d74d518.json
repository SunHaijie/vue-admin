{"remainingRequest":"/Users/Jeff/Documents/workspace-vs/vue-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Jeff/Documents/workspace-vs/vue-admin/src/views/Login/index.vue?vue&type=style&index=0&id=aeba673c&lang=scss&scoped=true&","dependencies":[{"path":"/Users/Jeff/Documents/workspace-vs/vue-admin/src/views/Login/index.vue","mtime":1614758485412},{"path":"/Users/Jeff/Documents/workspace-vs/vue-admin/node_modules/css-loader/dist/cjs.js","mtime":1613959812332},{"path":"/Users/Jeff/Documents/workspace-vs/vue-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1613959818681},{"path":"/Users/Jeff/Documents/workspace-vs/vue-admin/node_modules/postcss-loader/src/index.js","mtime":1613959815802},{"path":"/Users/Jeff/Documents/workspace-vs/vue-admin/node_modules/sass-loader/dist/cjs.js","mtime":1613959817599},{"path":"/Users/Jeff/Documents/workspace-vs/vue-admin/node_modules/cache-loader/dist/cjs.js","mtime":1613959811244},{"path":"/Users/Jeff/Documents/workspace-vs/vue-admin/node_modules/vue-loader/lib/index.js","mtime":1613959818680}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojbG9naW4gewogIGhlaWdodDogMTAwdmg7CiAgYmFja2dyb3VuZC1jb2xvcjogIzM0NGE1ZjsKfQoubG9naW4td3JhcCB7CiAgd2lkdGg6IDMzMHB4OwogIG1hcmdpbjogYXV0bzsKfQoubWVudS10YWIgewogIHRleHQtYWxpZ246IGNlbnRlcjsKICBsaSB7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICB3aWR0aDogODhweDsKICAgIGxpbmUtaGVpZ2h0OiAzNnB4OwogICAgZm9udC1zaXplOiAxNHB4OwogICAgY29sb3I6ICNmZmY7CiAgICBib3JkZXItcmFkaXVzOiAycHg7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgfQogIC5jdXJyZW50IHsKICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgLjEpOwogIH0KfQoubG9naW4tZm9ybSB7CiAgbWFyZ2luLXRvcDogMjlweDsKICBsYWJlbCB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIG1hcmdpbi1ib3R0b206IDNweDsKICAgIGZvbnQtc2l6ZTogMTRweDsKICAgIGNvbG9yOiAjZmZmOwogIH0KICAuaXRlbS1mcm9tIHsgbWFyZ2luLWJvdHRvbTogMTNweDsgfQogIC5ibG9jayB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIHdpZHRoOiAxMDAlOwogIH0KICAubG9naW4tYnRuIHsgbWFyZ2luLXRvcDogMTlweDsgfQp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/Login","sourcesContent":["<template>\n  <div id=\"login\">\n    <div class=\"login-wrap\">\n      <ul class=\"menu-tab\">\n        <li v-for=\"item in menuTab\" :key=\"item.id\" :class=\"{'current': item.current}\" @click=\"toggleMenu(item)\">\n          {{ item.txt }}\n        </li>\n      </ul>\n      <svg-icon icon-name=\"menu\" class-name=\"menu\"></svg-icon>\n      <!--表单 start-->\n      <el-form :model=\"ruleForm\" status-icon :rules=\"rules\" ref=\"loginForm\" class=\"login-form\" size=\"medium\">\n        <el-form-item prop=\"username\" class=\"item-from\">\n          <label for=\"username\">邮箱</label>\n          <el-input id=\"username\" type=\"text\" v-model=\"ruleForm.username\" autocomplete=\"off\"></el-input>\n        </el-form-item>\n\n        <el-form-item prop=\"password\" class=\"item-from\">\n          <label for=\"password\">密码</label>\n          <el-input id=\"password\" type=\"password\" v-model=\"ruleForm.password\" autocomplete=\"off\" minlength=\"6\" maxlength=\"20\"></el-input>\n        </el-form-item>\n\n        <el-form-item prop=\"passwords\" class=\"item-from\" v-show=\"model === 'register'\">\n          <label>重复密码</label>\n          <el-input type=\"password\" v-model=\"ruleForm.passwords\" autocomplete=\"off\" minlength=\"6\" maxlength=\"20\"></el-input>\n        </el-form-item>\n\n        <el-form-item prop=\"code\" class=\"item-from\">\n          <label>验证码</label>\n          <el-row :gutter=\"10\">\n            <el-col :span=\"15\">\n              <el-input v-model=\"ruleForm.code\" minlength=\"6\" maxlength=\"6\"></el-input>\n            </el-col>\n            <el-col :span=\"9\">\n              <el-button type=\"success\" class=\"block\" @click=\"getSms()\" :disabled=\"codeButtonStatus.status\">{{ codeButtonStatus.text }}</el-button>\n            </el-col>\n          </el-row>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"danger\" @click=\"submitForm('loginForm')\" class=\"login-btn block\" :disabled=\"loginButtonStatus\">{{ model === 'login' ? \"登录\" : \"注册\" }}</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n<script>\nimport sha1 from 'js-sha1';\nimport { Message } from 'element-ui';\nimport { GetSms, Register, Login } from \"@/api/login\";\nimport { reactive, ref, isRef, toRefs, onMounted, watch, onUnmounted } from '@vue/composition-api';\nimport { stripscript, validatePass, validateEmail, validateVCode } from '@/utils/validate';\nexport default {\n    name: 'login',\n    // setup(props, context){\n    /**\n     *attrs: (...) == this.$attrs\n      emit: (...) == this.$emit\n      listeners: (...) == this.$listeners\n      parent: (...) == this.$parent\n      refs: (...) == this.$refs\n      root: (...) == this\n      */\n    setup(props, { refs, root }){\n      // 验证用户名\n      let validateUsername = (rule, value, callback) => {\n        if (value === '') {\n          callback(new Error('请输入用户名'));\n        } else if(validateEmail(value)){\n          callback(new Error('用户名格式有误'));\n        } else {\n          callback(); //true\n        }\n      };\n      // 验证密码\n      let validatePassword = (rule, value, callback) => {\n        // 过滤后的数据\n        ruleForm.password = stripscript(value);\n        value = ruleForm.password;\n        if (value === '') {\n          callback(new Error(\"请输入密码\"));\n        } else if (validatePass(value)) {\n          callback(new Error(\"密码为6至20位数字+字母\"));\n        } else {\n          callback();\n        }\n      };\n      // 验证重复密码\n      let validatePasswords = (rule, value, callback) => {\n        // 如果模块值为login, 直接通过\n        if(model.value === 'login') { callback(); }\n        // 过滤后的数据\n        ruleForm.passwords = stripscript(value);\n        value = ruleForm.passwords;\n        if (value === '') {\n          callback(new Error('请再次输入密码'));\n        } else if (value != ruleForm.password) {\n          callback(new Error('重复密码不正确'));\n        } else {\n          callback();\n        }\n      };\n      // 验证验证码\n      let validateCode = (rule, value, callback) => {\n        if (value === '') {\n          return callback(new Error('请输入验证码'));\n        }else if(validateVCode(value)){\n          return callback(new Error('验证码格式有误'));\n        }else{\n          callback();\n        }\n      };\n      /*********************************************************************************************************************\n       * 声明数据\n       */\n      // 这里面放置data数据、生命周期、自定义的函数\n      const menuTab = reactive([\n        { txt: '登录', current: true, type: 'login' },\n        { txt: '注册', current: false, type: 'register' }\n      ]);\n      // 模块值 \n      const model = ref('login');\n      // 登录按钮禁用状态\n      const loginButtonStatus = ref(true);\n      // 验证码按钮状态\n      const codeButtonStatus = reactive(\n        {\n          status: false,\n          text: '获取验证码'\n        }\n      );\n      // 倒计时\n      const timer = ref(null);\n      // 表单绑定数据\n      const ruleForm = reactive({\n        username: '2412526271@qq.com',\n        password: 'wo123456',\n        passwords: 'wo123456',\n        code: ''\n      });\n      // 表单的验证\n      const rules = reactive({\n        username: [\n          { validator: validateUsername, trigger: 'blur' }\n        ],\n        password: [\n          { validator: validatePassword, trigger: 'blur' }\n        ],\n        passwords: [\n          { validator: validatePasswords, trigger: 'blur' }\n        ],\n        code: [\n          { validator: validateCode, trigger: 'blur' }\n        ]\n      });\n      /**\n       * 1、不建议在一个方法里面做多件不同的事件（尽可能只做自己本身的事，不要做其他人的事情）\n       * 2、尽量把相同的事情封装一个方法里面，通过调用函数进行执行\n       */\n      /**\n       * 声明函数\n       */\n      // 切换模块\n      const toggleMenu = (data => {\n        menuTab.forEach((elem, index) => {\n          elem.current = false;\n        });\n        // 高光\n        data.current = true;\n        // 修改模块值\n        model.value = data.type;\n        resetFromData()\n        clearCountDown()\n      });\n      // 清除表单数据\n      const resetFromData = (() => {\n        // 重置表单\n        // this.$refs[formName].resetFields(); //2.0\n        refs.loginForm.resetFields();  // 3.0\n      })\n      // 更新按钮状态\n      const updataButtonStatus = ((params) => {\n        codeButtonStatus.status = params.status;\n        codeButtonStatus.text = params.text;\n      })\n      const getSms = (() => {\n        // 进行提示\n        if(ruleForm.username == '' ) {\n          root.$message.error('邮箱不能为空！！');\n          return false;\n        }\n        if(validateEmail(ruleForm.username)) {\n          root.$message.error('邮箱格式有误，请重新输入！！');\n          return false;\n        }\n        // 获取验证码\n        let requestData = {\n          username: ruleForm.username, \n          module: model.value\n        }\n        // 修改获取验证按钮状态\n        updataButtonStatus({\n          status: true,\n          text: '发送中'\n        })\n        // 延时多长时间\n        GetSms(requestData).then(response => {\n          let data = response.data;\n          root.$message({\n            message: data.message,\n            type: 'success',\n            dangerouslyUseHTMLString: true\n          });\n          // 启用登录或注册按钮\n          loginButtonStatus.value = false;\n          // 调定时器，倒计时\n          countDown(60);\n        }).catch(error => {\n          // 启用登录或注册按钮\n          loginButtonStatus.value = false;\n          updataButtonStatus({\n            status: false,\n            text: '再次获取'\n          })\n          console.log(error);\n        })\n      })\n      /**\n       * 提交表单\n       */\n      const submitForm = (formName => {\n        refs[formName].validate((valid) => {\n          // 表单验证通过\n          if (valid) {\n            // 三元运算\n            model.value === 'login' ? login() : register()\n          } else {\n            console.log('error submit!!');\n            return false;\n          }\n        })\n      }) \n      /**\n       * 登录\n       */\n      const login = (() => {\n        let repuestData = {\n          username: ruleForm.username,\n          password: sha1(ruleForm.password),\n          code: ruleForm.code\n        }\n        root.$store.dispatch('app/login', repuestData).then(response => {\n          // 页面跳转\n          root.$router.push({\n            name: 'Console'\n          })\n        }).catch(error => {});\n      })\n      /**\n       * 注册\n       */\n      const register = (() => {\n        let requestData = {\n          username: ruleForm.username,\n          password: sha1(ruleForm.password),\n          code: ruleForm.code,\n          module: 'register'\n        }\n        // 注册接口\n        Register(requestData).then(response => {\n          let data = response.data\n          root.$message({\n            message: data.message,\n            type: 'success'\n          })\n          // 模拟注册成功\n          toggleMenu(menuTab[0])\n          clearCountDown()\n        }).catch(error => {\n          // 失败时执行的代码\n        })\n      })\n      /**\n       * 倒计时\n       */\n      const countDown = ((number) => {\n        // 60 和 0不见了，故意留BUG\n        // setTimeout:clearTimeout(变量)  只执行一次\n        // setInterval:clearInterval(变量))  不断的执行，需要条件才会停止\n        // 判断定时器是否存在，存在则清除\n        if(timer.value) { clearInterval(timer.value); }\n        let time = number\n        timer.value = setInterval(() => {\n          time--;\n          if(time === 0) {\n            clearInterval(timer.value)\n            updataButtonStatus({\n              status: false,\n              text: '再次获取'\n            })\n          }else{\n            codeButtonStatus.text = `倒计时${time}秒`   // es5 '倒计时' + time + '秒'\n          }\n        }, 1000)\n      })\n      /**\n       * 清除倒计时\n       */\n      const clearCountDown = (() => {\n        // 还原验证码按钮默认状态\n        updataButtonStatus({\n          status: false,\n          text: '获取验证码'\n        })\n        // 清除倒计时\n        clearInterval(timer.value)\n      })\n      /**\n       * 生命周期\n       */\n      // 挂载完成后\n      onMounted(() => {\n        \n      })\n      /**\n       * 销毁页面时\n       */\n      onUnmounted(() => {\n        clearInterval(timer.value);\n      })\n      return {\n        menuTab,\n        model,\n        loginButtonStatus,\n        codeButtonStatus,\n        ruleForm,\n        rules,\n        timer,\n        toggleMenu,\n        submitForm,\n        getSms\n      }\n    }\n}\n</script>\n<style lang=\"scss\" scoped>\n#login {\n  height: 100vh;\n  background-color: #344a5f;\n}\n.login-wrap {\n  width: 330px;\n  margin: auto;\n}\n.menu-tab {\n  text-align: center;\n  li {\n    display: inline-block;\n    width: 88px;\n    line-height: 36px;\n    font-size: 14px;\n    color: #fff;\n    border-radius: 2px;\n    cursor: pointer;\n  }\n  .current {\n    background-color: rgba(0, 0, 0, .1);\n  }\n}\n.login-form {\n  margin-top: 29px;\n  label {\n    display: block;\n    margin-bottom: 3px;\n    font-size: 14px;\n    color: #fff;\n  }\n  .item-from { margin-bottom: 13px; }\n  .block {\n    display: block;\n    width: 100%;\n  }\n  .login-btn { margin-top: 19px; }\n}\n</style>"]}]}